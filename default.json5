{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  description: 'Use the default Renovate config preset for the @bfra-me organization.',

  extends: [
    'config:recommended',
    ':semanticCommits',
    ':automergeRequireAllStatusChecks',
    'mergeConfidence:age-confidence-badges',
    'github>bfra-me/renovate-config:replacements.json5',
    'github>bfra-me/renovate-config:vendors/bfra.me',

    // Group types before specific package groups.
    'github>bfra-me/renovate-config:group/types',

    'github>bfra-me/renovate-config:group/eslint',
    'github>bfra-me/renovate-config:group/jest',
    'github>bfra-me/renovate-config:group/octokit',
    'github>bfra-me/renovate-config:group/prettier',
    'github>bfra-me/renovate-config:group/react',
    'github>bfra-me/renovate-config:group/rollup',
    'github>bfra-me/renovate-config:group/vite',
    'github>bfra-me/renovate-config:maintenance/security',
    'github>bfra-me/renovate-config:maintenance/weeklyLockFileUpdates',
    'github>bfra-me/renovate-config:vendors/elstudio',
  ],

  timezone: 'America/Phoenix',
  updateNotScheduled: true,

  transitiveRemediation: true,
  postUpdateOptions: [
    'gomodTidy',
    'npmDedupe',
    'pnpmDedupe',
    'yarnDedupeHighest',
  ],

  automergeStrategy: 'squash',
  platformAutomerge: false,

  commitMessageAction: 'update',
  commitMessageLowerCase: 'never',

  lockFileMaintenance: {
    commitMessageAction: 'maintain lockfiles',
  },
  pin: {
    commitMessageAction: 'pin',
  },
  pinDigest: {
    commitMessageAction: 'pin (digest)',
  },
  replacement: {
    commitMessageAction: 'replace',
  },
  rollback: {
    commitMessageAction: 'rollback',
  },

  ignorePresets: [':ignoreModulesAndTests'],
  ignorePaths: [
    '**/node_modules/**',
    '**/bower_components/**',
    '**/vendor/**',
    '**/examples/**',
    '**/__tests__/**',
    '**/test/**',
    '**/tests/**',
    '**/__fixtures__/**',
    '**/out/**',
    '**/dist/**',
  ],

  addLabels: ['dependencies', 'renovate', '{{depType}}', '{{updateType}}'],

  // TODO: Renovate does not preserve JSON5 config files
  configMigration: false,
  configWarningReuseIssue: false,

  dependencyDashboardTitle: 'Renovate Dashboard',

  prConcurrentLimit: 5,
  prCreation: 'not-pending',
  prHourlyLimit: 0,
  rebaseWhen: 'behind-base-branch',
  recreateClosed: true,

  assigneesFromCodeOwners: true,
  assigneesSampleSize: 1,
  reviewersFromCodeOwners: true,
  reviewersSampleSize: 1,

  packageRules: [
    {
      description: 'Delay updates until npm packages are safe from unpublishing.',
      matchDatasources: ['npm'],
      extends: ['npm:unpublishSafe'],
      prNotPendingHours: 73,
    },
    {
      description: 'Enable major version updates for Docker images and pin digests in Dockerfiles and docker-compose.yml',
      extends: ['docker:enableMajor', 'docker:pinDigests'],
      matchManagers: ['dockerfile', 'docker-compose'],
    },
    {
      description: 'Require dependency dashboard approval for major updates.',
      matchUpdateTypes: ['major'],
      dependencyDashboardApproval: true,
    },
    {
      description: 'Require approval for minor updates of specific packages',
      matchPackageNames: ['go', 'python', 'typescript'],
      matchUpdateTypes: ['minor'],
      dependencyDashboardApproval: true,
    },
    {
      description: 'Require approval for minor updates of unstable packages (version is 0.x).',
      matchCurrentVersion: '/^v?0/',
      matchUpdateTypes: ['minor'],
      dependencyDashboardApproval: true,
      excludePackageNames: ['lucide-react'],
      excludePackagePrefixes: ['@bfra.me/', 'bfra-me/'],
    },
    {
      description: 'Automerge `digest`, `patch`, and `pinDigest` update types.',
      matchUpdateTypes: ['digest', 'patch', 'pinDigest'],
      addLabels: ['automerge'],
      automerge: true,
      rebaseWhen: 'behind-base-branch',
    },
    {
      description: 'Automerge `minor` and `patch` update types (except unstable versions, e.g., `0.x`).',
      matchCurrentVersion: '!/^v?0/',
      matchUpdateTypes: ['minor', 'patch'],
      addLabels: ['automerge'],
      automerge: true,
      rebaseWhen: 'behind-base-branch',
    },
    {
      description: 'Pin GitHub Action digests to SemVer versions.',
      matchDepTypes: ['action'],
      extractVersion: '^(?<version>v?\\d+(\\.\\d+\\.\\d+)?)$',
      pinDigests: true,
      versioning: 'regex:^v?(?<major>\\d+)(\\.(?<minor>\\d+)\\.(?<patch>\\d+))?$',
    },
    {
      description: 'Automerge GitHub Actions as PRs.',
      matchManagers: ['github-actions'],
      automergeType: 'pr',
      prCreation: 'immediate',
      rebaseWhen: 'behind-base-branch',
    },
    {
      description: 'Group npm dependencies by name.',
      matchDatasources: ['npm'],
      matchDepTypes: ['dependencies', 'devDependencies'],
      excludePackageNames: ['@types/**'],
      groupName: '{{depName}}',
    },
    {
      description: 'Group @types/* dependencies together with the npm dependency they are for.',
      matchDatasources: ['npm'],
      matchDepTypes: ['dependencies', 'devDependencies'],
      matchPackageNames: ['@types/**'],
      groupName: "{{{replace '@types/' '' depName}}}",
    },
    {
      description: 'Add support for @bfra-me Renovate config presets.',
      matchDepNames: ['bfra-me/renovate-config'],
      excludeUpdateTypes: ['major'],
      commitMessageTopic: '{{depName}} preset',
      pinDigests: false,
      rangeStrategy: 'replace',
    },
    {
      description: 'Exclude broken versions of the `bfra-me/renovate-config` preset.',
      matchDepNames: ['bfra-me/renovate-config'],
      allowedVersions: '>=v3.4.6',
    },
    {
      description: 'Enable platform automerge feature for @bfra-me organization repositories.',
      matchRepositories: ['bfra-me/**'],
      platformAutomerge: true,
    },
    {
      description: ['Disable patch updates except for @bfra-me packages.'],
      excludePackageNames: ['@bfra.me/**', 'bfra-me/**'],
      matchUpdateTypes: ['patch'],
      enabled: false,
    },
    {
      description: 'Automerge `minor` and `patch` update types of @bfra-me packages.',
      matchPackageNames: ['@bfra.me/**', 'bfra-me/**'],
      matchUpdateTypes: ['minor', 'patch'],
      addLabels: ['automerge'],
      automerge: true,
      dependencyDashboardApproval: false,
      rebaseWhen: 'behind-base-branch',
    },
    {
      description: 'Remove minimum release age config for bfra.me packages.',
      matchPackageNames: ['@bfra.me/**', 'bfra-me/**'],
      minimumReleaseAge: null,
      prNotPendingHours: 0,
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: 'Update `version` and <*>`_VERSION` values in GitHub Actions and workflows.',
      fileMatch: [
        '^action\\.ya?ml$',
        '^\\.github\\/(actions|workflows)\\/[^/]+\\.ya?ml$',
      ],
      matchStrings: [
        '\\s+version: (?<currentValue>.+?) # renovate: datasource=(?<datasource>.+?) depName=(?<depName>.+?)(?: (?:packageName|lookupName)=(?<packageName>.+?))?(?: versioning=(?<versioning>.+?))?\\s',
        '\\s*[A-Z0-9_]+?_VERSION: (?<currentValue>.+?) # renovate: datasource=(?<datasource>.+?) depName=(?<depName>.+?)(?: (?:packageName|lookupName)=(?<packageName>.+?))?(?: versioning=(?<versioning>.+?))?\\s',
      ],
    },
    {
      customType: 'regex',
      description: 'Update `install-`<*> Buildpack commands and <*>`_VERSION` values in Dockerfiles.',
      fileMatch: ['(^|/|\\.)Dockerfile$', '(^|/)Dockerfile\\.[^/]*$'],
      matchStrings: [
        '# renovate: datasource=(?<datasource>.+?) depName=(?<depName>.+?)(?: (?:packageName|lookupName)=(?<packageName>.+?))?(?: versioning=(?<versioning>.+?))?\\s(?:ENV|ARG) .+?_VERSION=(?<currentValue>.+?)\\s',
        '# renovate: datasource=(?<datasource>.+?)(?: (?:packageName|lookupName)=(?<packageName>.+?))?(?: versioning=(?<versioning>.+?))?\\sRUN install-[a-z0-9]+? (?<depName>[a-z0-9-]+?) (?<currentValue>.+?)\\s',
      ],
      versioningTemplate: '{{#if versioning}}{{versioning}}{{else}}semver{{/if}}',
    },
    {
      customType: 'regex',
      description: 'Update GitHub Action references in Markdown files.',
      fileMatch: ['\\.md$'],
      matchStrings: [
        '\\suses: (?<depName>[\\w-]+\\/[\\w-]+)(?<path>\\/.*)?@(?<currentValue>v\\d+\\.\\d+\\.\\d+)',
        '\\suses: (?<depName>[\\w-]+\\/[\\w-]+)(?<path>\\/.*)?@(?<currentDigest>[a-z0-9]{40}|[a-z0-9]{64}) # tag=(?<currentValue>v\\d+\\.\\d+\\.\\d+)',
      ],
      datasourceTemplate: 'github-tags',
      versioningTemplate: 'semver',
    },
    {
      customType: 'regex',
      description: 'Update _VERSION variables in shell scripts.',
      fileMatch: ['\\.sh$'],
      matchStrings: [
        '# renovate: datasource=(?<datasource>[a-z-]+?) depName=(?<depName>.+?)(?: (?:packageName|lookupName)=(?<packageName>.+?))?(?: versioning=(?<versioning>[a-z-]+?))?\\s+?.+?_VERSION=(?<currentValue>.+?)\\s',
      ],
      versioningTemplate: '{{#if versioning}}{{versioning}}{{else}}semver{{/if}}',
    },
  ],
}
